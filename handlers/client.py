from aiogram import types, Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command, StateFilter

from aiogram.types import ContentType, InputMediaPhoto
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import Service, Barbers
from database.query import orm_get_items, orm_get_single_item, orm_get_banner, orm_add_order
from handlers.customer_processing import get_client_content

from functions.send_sms import sending_sms
from functions.google_calendar import send_upcomming_events
from keyboards.client_kb_markup import send_contact
from keyboards.client_kb_inline import service_kb, kb_service_choice, kb_barber_choice, MenuCallBack

import asyncio

user = Router (name=__name__)

last_message_time = 0


class FsmClient (StatesGroup):
    phone_number = State ()
    send_phone_number = State ()
    verify_code = State ()
    get_name = State ()


@user.message (CommandStart ())
async def start_cmd (message: types.Message, session: AsyncSession):
    # await message.answer(f'–ü—Ä–∏–≤–µ—Ç <u>{message.from_user.username}</u>!\n'
    #                                             f'–Ø —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ü§ñ–±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞—Ä–±–µ—Ä—à–æ–ø <b>"SHARK"</b>\n'
    #                                             f'–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ä—Ç–æ—Ä–æ–º.\n\n'
    #                                             f'–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?',reply_markup=service_kb.as_markup(),parse_mode='html')
    media, reply_keyboard = await get_client_content (session, level=0, menu_name='main')
    await message.answer_photo (media.media, caption=media.caption, reply_markup=reply_keyboard)


@user.callback_query (MenuCallBack.filter ())
async def user_menu (callback: types.CallbackQuery, callback_data: MenuCallBack, session: AsyncSession,
                     state: FSMContext):

    if callback_data.menu_name == 'service':
        await state.update_data (date_time=callback_data.date_time)

    if callback_data.menu_name == 'barbers':
        await state.update_data (id_service=callback_data.service_id)

    if callback_data.menu_name == 'add_barber':
        await state.update_data (id_barber=callback_data.barber_id)



        await state.set_state (FsmClient.phone_number)
        await get_number_from_user(callback,state,session)
        return

    media, reply_markup = await get_client_content (
        session,
        level=callback_data.level,
        menu_name=callback_data.menu_name,
        id_service=callback_data.service_id,
        page=callback_data.page
    )

    await callback.message.edit_media (media=media, reply_markup=reply_markup)
    await callback.answer ()


#############################–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞#############################################

@user.callback_query(FsmClient.phone_number)
async def get_number_from_user (callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):

    banner = await orm_get_banner (session=session, page='main')
    image = InputMediaPhoto (media=banner.image, caption='–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å —É—Ç–æ—á–Ω–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏')


    await callback_query.message.edit_media (media=image)

    await callback_query.message.answer (text='–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –≤ —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7*********'
                               '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∫—É', reply_markup=send_contact)
    await state.set_state (FsmClient.send_phone_number)


@user.message ((F.content_type == ContentType.CONTACT and FsmClient.send_phone_number),
               F.contact.phone_number.as_ ('phone_number'))
@user.message ((F.text.startswith == '+7' and F.text.len () == 12 and FsmClient.send_phone_number),
               F.text.phone_number.as_ ('phone_number'))
async def send_sms_code (message: types.Message, state: FSMContext, phone_number: str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ —É–∂–µ 10 —Å–µ–∫—É–Ω–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

    await state.update_data(not_confirmed_number=phone_number)
    # global last_message_time
    # current_time = asyncio.get_event_loop ().time ()
    #
    # current_time = (int (str (round (current_time)) [ 2: ]))
    #
    #
    # if last_message_time != 0:
    #     await message.answer (
    #         f'–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å —Å–º—Å —Ç–∞–∫ —á–∞—Å—Ç–æ\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {current_time - last_message_time} —Å–µ–∫...')
    #     if current_time - last_message_time > 1:
    #         await asyncio.sleep (current_time - last_message_time)
    #
    # phone_number = str (phone_number)
    #
    # # —Ñ—É–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ sms-—Å–æ–æ–±—â–µ–Ω–∏—è
    #
    # last_message_time = current_time

    sms_code = await sending_sms (f'–í–∞—à –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–∞—Ä–±–µ—Ä—à–æ–ø–∞ "Shark": ', receiver=phone_number)

    # –ø—Ä–æ—à–µ–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–º—Å –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    if sms_code:

        await state.update_data (code=sms_code)

        await message.answer ('üîí–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', reply_markup=types.ReplyKeyboardRemove ())
        await state.set_state (FsmClient.verify_code)

    else:
        await state.update_data (code=sms_code)
        await message.answer ('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
        await message.answer ('üîí–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', reply_markup=types.ReplyKeyboardRemove ())
        await state.set_state (FsmClient.verify_code)

    return


@user.message (F.text.as_ ('user_code'), FsmClient.verify_code)
async def verify_code (message: types.Message, state: FSMContext,session:AsyncSession ,user_code: str):
    data = await state.get_data ()
    code = str (data.get ('code'))
    print ("–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:" + code)
    if user_code == code:
        await message.answer (f'üîì–í–∞—à –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n–ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?')
        await state.update_data(phone_number=data['not_confirmed_number'])
        await state.set_state (FsmClient.get_name)

    else:
        await message.answer ('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–Ω–æ–≤–æ',reply_markup=send_contact)
        await state.set_state(FsmClient.send_phone_number)


@user.message (F.text.as_ ('user_name'), FsmClient.get_name)
async def get_user_name (message: types.Message, state: FSMContext, user_name: str, session: AsyncSession):
    await state.update_data(name=user_name)

    data = await state.get_data ()




    await orm_add_order (
        session=session,
        data=data
    )

    banner = await orm_get_banner (session=session, page='main')
    barber=(await orm_get_single_item(session=session,item_id=data['id_barber'],table=Barbers)).name
    service = (await orm_get_single_item (session=session, item_id=data [ 'id_service' ], table=Service)).name


    mes = await message.answer (

        f'‚úÖ–û—Ç–ª–∏—á–Ω–æ!\n<strong>{data [ "name" ].capitalize ()}</strong>, –¥–∞–≤–∞–π—Ç–µ –ø–æ–¥—ã—Ç–æ–∂–∏–º:\n\n'
        f'üìç–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É: <u>"{service}"</u>\n'
        f'üßîüèª–í–∞—à –±–∞—Ä–±–µ—Ä: <u>{barber}</u>\n'
        f'üìÖ–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: <u>{data [ "date_time" ]}</u>\n\n'
        f'üí¨–ü—Ä–æ—Å—å–±–∞ —Å–æ–æ–±—â–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ –≤ —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏! +79153451298', parse_mode='html')

    await state.clear()
    await mes.pin()
