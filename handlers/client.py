from aiogram import types,Router,F
from aiogram.fsm.state import StatesGroup,State
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart,Command

from aiogram.types import ContentType
from keyboards.calendar_inline import get_inline_calendar
from functions.send_sms import sending_sms
from functions.google_calendar import send_upcomming_events
from keyboards.client_kb_markup import send_contact
from keyboards.client_kb_inline import service_kb



import asyncio


user = Router(name=__name__)


class FsmClient(StatesGroup):
    write_down=State()

    phone_number=State()
    send_phone_number=State()
    get_code=State()
    code=State()
    verify_code=State()
    choose_time=State()


@user.message(CommandStart())
async def start_cmd(message:types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç <u>{message.from_user.username}</u>!\n'
                                                f'–Ø —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ü§ñ–±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞—Ä–±–µ—Ä—à–æ–ø <b>"SHARK"</b>\n'
                                                f'–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ä—Ç–æ—Ä–æ–º.\n\n'
                                                f'–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?',reply_markup=service_kb.as_markup(),parse_mode='html')
    await send_upcomming_events()


@user.callback_query(F.data=='service_‚úÇ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É')
async def service(callback_query:types.CallbackQuery,state:FSMContext):
    print('–∑–∞–ø–∏—Å—å')
    await callback_query.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:',reply_markup=None,parse_mode='html')
    await state.set_state(FsmClient.phone_number)






@user.message(FsmClient.phone_number)
async def get_number_from_user(message:types.Message,state:FSMContext):
    await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –≤ —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7*********'
                                '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∫—É',reply_markup=send_contact)
    await state.set_state(FsmClient.send_phone_number)

@user.message((F.content_type==ContentType.CONTACT and FsmClient.send_phone_number),F.contact.phone_number.as_('phone_number'))
@user.message((F.text.startswith=='+7' and  F.text.len()==12 and FsmClient.send_phone_number),F.text.phone_number.as_('phone_number'))
@user.message(Command('phone'))
async def send_sms_code(message:types.Message,state:FSMContext,phone_number:str):
    phone_number=str(phone_number)
    print('–Ω–æ–º–µ—Ä: '+phone_number)
    # —Ñ—É–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ sms-—Å–æ–æ–±—â–µ–Ω–∏—è
    sms_code=await sending_sms(f'–í–∞—à –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ',receiver=phone_number)
    # –ø—Ä–æ—à–µ–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–º—Å –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    if sms_code:

        await state.update_data(code=sms_code)

        await message.answer ('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', reply_markup=None)
        await state.set_state (FsmClient.verify_code)

    else:
        await state.update_data (code=sms_code)
        await message.answer ('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ')
        await message.answer ('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', reply_markup=None)
        await state.set_state (FsmClient.verify_code)
    #–º–∏–¥–ª–≤–∞—Ä—å
    #–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    await asyncio.sleep(30)
    return




@user.message(F.text.as_('user_code'))
async def verify_code(message:types.Message,state:FSMContext,user_code:str):
    data = await state.get_data()
    code = str(data.get('code'))
    print("–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:"+code)
    if user_code==code:
        await message.answer('–í–∞—à –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!')
        await state.set_state(FsmClient.choose_time)

    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ')
        await get_number_from_user(message,state)


@user.message(FsmClient.choose_time)
async def choose_time(message:types.Message,state:FSMContext):
    pass

    #await bot.send_message(message.from_user.id,'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É',reply_markup=)


